mport (
	"os"
	"log"
	"net/http"
	"net/url"
	"fmt"
	"io/ioutil"
	"strings"
	"encoding/json"
	"golang.org/x/oauth2"
	"golang.org/x/oauth2/facebook"
	// "github.com/asaskevich/govalidator"
)

var oauthStateString = "thisshouldberandom"

var oauthConf = &oauth2.Config{
    ClientID:     os.Getenv("ENV_FB_CLIENT_ID"),
    ClientSecret: os.Getenv("ENV_FB_CLIENT_SECRET"),
    RedirectURL:  os.Getenv("ENV_FB_REDIRECT_URL"),
    Scopes:       []string{"email", "public_profile"},
    Endpoint:     facebook.Endpoint,
}

func writeReply(w http.ResponseWriter, resp *Response){
	w.Header().Set("Content-Type", "application/json")
	bytes, err := json.Marshal(*resp)

	if err != nil {
		log.Print(err)
	}
	
	w.Write(bytes)
}

var NotImplemented = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request){
	resp := Response{Message: "Not implemented", Success: false}
	writeReply(w, &resp)
})

var StatusHandler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request){
	fmt.Printf("TEST %s\n", os.Getenv("ENV_FB_CLIENT_ID"))
	resp := Response{Message: "OK!", Success: true}
	writeReply(w, &resp)
})

var RegisterHandler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request){
	query := r.URL.Query()
	email := query.Get("email")
	token := query.Get("token")

	resp := Response{Message: "Failed", Success: false}

	if len(email) == 0 || len(token) == 0 {
		resp.Message = "Missing email or token"
		writeReply(w, &resp)
		return
	}

	if !govalidator.IsEmail(email) {
		resp.Message = "Not a valid email"
		writeReply(w, &resp)
		return
	}
	
	stmt, err := db.Prepare(`INSERT INTO main_schema.user (email, token, creation_time) 
                             VALUES ($1, $2, NOW())`)

	if err != nil {
		log.Print(err)
		resp.Message = "Internal fail"
		writeReply(w, &resp)
		return
	}
	
	_, err = stmt.Exec(email, token)

	if err != nil {
		log.Print(err)
		writeReply(w, &resp)
		return
	}

	resp.Success = true
	resp.Message = "OK!"
	writeReply(w, &resp)
}) 


var handleFacebookLogin = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
	Url, err := url.Parse(oauthConf.Endpoint.AuthURL)
	if err != nil {
		log.Fatal("Parse: ", err)
	}
	parameters := url.Values{}	
	parameters.Add("client_id", oauthConf.ClientID)
	parameters.Add("scope", strings.Join(oauthConf.Scopes, " "))
	parameters.Add("redirect_uri", oauthConf.RedirectURL)
	parameters.Add("response_type", "code")
	parameters.Add("state", oauthStateString)
	Url.RawQuery = parameters.Encode()
	url := Url.String()
	http.Redirect(w, r, url, http.StatusTemporaryRedirect)
})

var handleFacebookCallback = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
	state := r.FormValue("state")
	if state != oauthStateString {
		fmt.Printf("invalid oauth state, expected '%s', got '%s'\n", oauthStateString, state)
		http.Redirect(w, r, "/", http.StatusTemporaryRedirect)
		return
	}

	code := r.FormValue("code")

	token, err := oauthConf.Exchange(oauth2.NoContext, code)
	if err != nil {
		fmt.Printf("oauthConf.Exchange() failed with '%s'\n", err)
		http.Redirect(w, r, "/", http.StatusTemporaryRedirect)
		return
	}

	resp, err := http.Get("https://graph.facebook.com/me?access_token=" +
		url.QueryEscape(token.AccessToken))
	if err != nil {
		fmt.Printf("Get: %s\n", err)
		http.Redirect(w, r, "/", http.StatusTemporaryRedirect)
		return
	}
	defer resp.Body.Close()

	response, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		fmt.Printf("ReadAll: %s\n", err)
		http.Redirect(w, r, "/", http.StatusTemporaryRedirect)
		return
	}

	log.Printf("parseResponseBody: %s\n", string(response))

	http.Redirect(w, r, "/", http.StatusTemporaryRedirect)
})

var LoginHandler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request){
	w.Write([]byte("Login"))
	// http://stackoverflow.com/questions/27368973/golang-facebook-authentication-using-golang-org-x-oauth2
})

https://www.facebook.com/v2.9/dialog/oauth?client_id=315717428848841&redirect_uri=https://www.facebook.com/connect/login_success.html
